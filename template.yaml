AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 3
  Api:
    OpenApiVersion: 3.0.2

Mappings:
  Constant:
    ResourceId:
      StageName: dev
      VpcId: vpc-07a551389a04caacb
      VpcCidrIp: 10.5.5.0/24
      SubnetId1: subnet-0a0d222d65796d690
      SubnetId2: subnet-066ce9fce3a64b3ce

Resources:

  ######################################################################
  #  Lambda                                                            #
  ######################################################################

  # Hello API Lambda Function
  HelloApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/function/hello/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      FunctionName: hello-api
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt PrivateApiRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt PrivateApiSg.GroupId
        SubnetIds:
          - !FindInMap [Constant, ResourceId, SubnetId1]
          - !FindInMap [Constant, ResourceId, SubnetId2]
      Events:
        GetEndpoint:
          Type: Api
          Properties:
            Path: /hello-api-endpoint/{arg}
            Method: get
            RestApiId: !Ref PrivateApiApiGateway
        PostEndpoint:
          Type: Api
          Properties:
            Path: /hello-api-endpoint
            Method: post
            RestApiId: !Ref PrivateApiApiGateway

  # Bye API Lambda Function
  ByeApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/function/bye/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      FunctionName: bye-api
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt PrivateApiRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt PrivateApiSg.GroupId
        SubnetIds:
          - !FindInMap [Constant, ResourceId, SubnetId1]
          - !FindInMap [Constant, ResourceId, SubnetId2]
      Events:
        GetEndpoint:
          Type: Api
          Properties:
            Path: /bye-api-endpoint/{arg}
            Method: get
            RestApiId: !Ref PrivateApiApiGateway
        PostEndpoint:
          Type: Api
          Properties:
            Path: /bye-api-endpoint
            Method: post
            RestApiId: !Ref PrivateApiApiGateway

  # Lambda実行ロール
  PrivateApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: private-api-lambda-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaVPCAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  - cloudwatch:PutMetricData
                Resource: '*'

  ######################################################################
  #  API Gateway                                                       #
  ######################################################################

  # API Gateway Lambda Permissions for Hello API
  HelloApiFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HelloApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateApiApiGateway}/*'

  # API Gateway Lambda Permissions for Bye API
  ByeApiFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ByeApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateApiApiGateway}/*'

  # API Gateway
  PrivateApiApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: private-api
      StageName: !FindInMap [Constant, ResourceId, StageName]
      MethodSettings:
        # ログを有効化
        - DataTraceEnabled: true
          LoggingLevel: 'INFO'
          ResourcePath: '/*'
          HttpMethod: '*'
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref PrivateApiVpcEndpoint
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: private-api
          description: private-api
        schemes:
          - https
        consumes:
          - application/json
        produces:
          - application/json
        paths:
          /hello-api-endpoint/{arg}:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloApiFunction.Arn}/invocations"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /hello-api-endpoint:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloApiFunction.Arn}/invocations"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /bye-api-endpoint/{arg}:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ByeApiFunction.Arn}/invocations"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /bye-api-endpoint:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ByeApiFunction.Arn}/invocations"
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy

  ######################################################################
  #  API Gateway共通設定                                                #
  ######################################################################

  # API Gatewayのログ出力用ロール
  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  # API Gatewayにログ出力用ロールを設定
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn


  ######################################################################
  #  VPCエンドポイント                                                   #
  ######################################################################

  # VPCエンドポイント
  PrivateApiVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      SubnetIds:
        - !FindInMap [Constant, ResourceId, SubnetId1]
        - !FindInMap [Constant, ResourceId, SubnetId2]
      VpcId: !FindInMap [Constant, ResourceId, VpcId]
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !GetAtt PrivateApiSg.GroupId
      PrivateDnsEnabled: true

  # VPCエンドポイント用セキュリティグループ
  PrivateApiSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PrivateApiSg
      GroupName: PrivateApiSg
      VpcId: !FindInMap [Constant, ResourceId, VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [Constant, ResourceId, VpcCidrIp]
